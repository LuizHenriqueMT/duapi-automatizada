name: Parallel Cypress Tests
on: workflow_dispatch
jobs:
  initial_tests:
    name: Initial Cypress run
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        container: [1, 2]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: npm install

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set environment variables
        id: set_env
        run: |
          if [ "${{ matrix.container }}" == "1" ]; then
            echo "USER_EMAIL=${{ secrets.USER_EMAIL_1 }}" > env_vars.txt
            echo "USER_PASSWORD=${{ secrets.USER_PASSWORD_1 }}" >> env_vars.txt
            echo "BASE_URL=${{ secrets.BASE_URL_1 }}" >> env_vars.txt
            echo "API_TOKEN=${{ secrets.API_TOKEN_1 }}" >> env_vars.txt
          elif [ "${{ matrix.container }}" == "2" ]; then
            echo "USER_EMAIL=${{ secrets.USER_EMAIL_2 }}" > env_vars.txt
            echo "USER_PASSWORD=${{ secrets.USER_PASSWORD_2 }}" >> env_vars.txt
            echo "BASE_URL=${{ secrets.BASE_URL_2 }}" >> env_vars.txt
            echo "API_TOKEN=${{ secrets.API_TOKEN_2 }}" >> env_vars.txt
          fi

      - name: Create or update cypress.env.json
        run: |
          # Cria um arquivo base se não existir
          if [ ! -f cypress.env.json ]; then
            echo '${{ secrets.CYPRESS_ENV_CI }}' > cypress.env.json
          fi
      
          # Carrega as variáveis do arquivo temporário
          source env_vars.txt
      
          # Atualizar o arquivo JSON com as variáveis referente a cada container
           jq --arg email "$USER_EMAIL" --arg senha "$USER_PASSWORD" --arg url_teste "$BASE_URL" --arg api_token "$API_TOKEN" \
          '.login.email = $email | .login.senha = $senha | .URL_TESTE = $url_teste | .API_TOKEN = $api_token' \
          cypress.env.json > cypress.env.tmp.json && mv cypress.env.tmp.json cypress.env.json

      
      - name: Display environment variables
        run: cat env_vars.txt

      # - name: Create cypress.env.json
      #   run: |
      #     echo '${{ secrets.CYPRESS_ENV_CI }}' > cypress.env.json

      # - name: Install Microsoft Edge
      #   run: |
      #     sudo apt update
      #     sudo apt install -y software-properties-common
      #     sudo add-apt-repository -y "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main"
      #     curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
      #     sudo apt update
      #     sudo apt install -y microsoft-edge-stable

      # - name: Run Cypress tests on Edge
      #   run: npx cypress run --browser edge

      - name: Configure Allure
        run: npm install -g allure-commandline --save-dev

      - name: Download plugin Allure
        run: npm install --save-dev @shelex/cypress-allure-plugin

      - name: Run initial Cypress tests        
        uses: cypress-io/github-action@v6
        with:
          record: true
          parallel: true
          group: "Initial Tests"
          ci-build-id: '${{ github.sha }}-${{ github.workflow }}-${{ github.event_name }}'
          headed: true
          # spec: "cypress/e2e/!(loginTentativa.cy.js|novoWorkspace.cy.js|entregaProduto.cy.js)"
          # spec: "cypress/e2e/(entregaProduto.cy.js|login.cy.js)"
          spec: "cypress/e2e/**/*.cy.js,!cypress/e2e/loginTentativa.cy.js"
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          allure: true
          ALLURE_LANG: br
          LANG: pt_BR.UTF-8
          LC_ALL: pt_BR.UTF-8
          NUM_TESTS_KEPT_IN_MEMORY: 0

      - name: Move Allure Results
        if: always()
        run: |
          mkdir -p allure-results-${{ matrix.container }}
          mv allure-results/* allure-results-${{ matrix.container }}/ || echo "placeholder" > allure-results-${{ matrix.container }}/placeholder.txt
        
      - name: Create Environment File
        run: |
          echo "Browser=$(npx cypress --version | sed -n '3 p' | awk '{print $1}')" > allure-results-${{ matrix.container }}/environment.properties
          echo "Browser.Version=$(npx cypress --version | sed -n '3 p' | awk '{print $3}')" >> allure-results-${{ matrix.container }}/environment.properties
          echo "Platform=${{ runner.os }}" >> allure-results-${{ matrix.container }}/environment.properties
          echo "Platform.Version=$(uname -r)" >> allure-results-${{ matrix.container }}/environment.properties
          echo "Environment=CI" >> allure-results-${{ matrix.container }}/environment.properties
          echo "Cypress.Version=$(npx cypress --version | grep 'Cypress binary' | awk '{print $4}')" >> allure-results-${{ matrix.container }}/environment.properties
          echo "Node.Version=$(node -v | tr -d 'v')" >> allure-results-${{ matrix.container }}/environment.properties

      - name: Upload Allure Results Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.container }}
          path: allure-results-${{ matrix.container }}
          retention-days: 5

  login_tentativa:
    name: Initial Cypress run
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: npm install

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set environment variables
        id: set_env
        run: |
          echo "BASE_URL=${{ secrets.BASE_URL_2 }}" >> env_vars.txt

      - name: Create or update cypress.env.json
        run: |
          # Cria um arquivo base se não existir
          if [ ! -f cypress.env.json ]; then
            echo '${{ secrets.CYPRESS_ENV_CI }}' > cypress.env.json
          fi
      
          # Carrega as variáveis do arquivo temporário
          source env_vars.txt
      
          # Atualizar o arquivo JSON com as variáveis referente a cada container
           jq --arg url_teste "$BASE_URL" \
          '.URL_TESTE = $url_teste' \
          cypress.env.json > cypress.env.tmp.json && mv cypress.env.tmp.json cypress.env.json

      
      - name: Display environment variables
        run: cat env_vars.txt

      # - name: Create or update cypress.env.json
      #   run: |
      #     echo '${{ secrets.CYPRESS_ENV_CI }}' > cypress.env.json

      - name: Configure Allure
        run: npm install -g allure-commandline --save-dev

      - name: Download plugin Allure
        run: npm install --save-dev @shelex/cypress-allure-plugin

      - name: Run initial Cypress tests        
        uses: cypress-io/github-action@v6
        with:
          record: true
          parallel: true
          group: "Login Tentativa Tests"
          ci-build-id: '${{ github.sha }}-${{ github.workflow }}-${{ github.event_name }}'
          headed: true
          spec: "cypress/e2e/loginTentativa.cy.js"
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          allure: true
          ALLURE_LANG: br
          LANG: pt_BR.UTF-8
          LC_ALL: pt_BR.UTF-8

      - name: Move Allure Results
        if: always()
        run: |
          mkdir -p allure-results-9
          mv allure-results/* allure-results-9/ || echo "placeholder" > allure-results-9/placeholder.txt
        
      - name: Create Environment File
        run: |
          echo "Browser=$(npx cypress --version | sed -n '3 p' | awk '{print $1}')" > allure-results-9/environment.properties
          echo "Browser.Version=$(npx cypress --version | sed -n '3 p' | awk '{print $3}')" >> allure-results-9/environment.properties
          echo "Platform=${{ runner.os }}" >> allure-results-9/environment.properties
          echo "Platform.Version=$(uname -r)" >> allure-results-9/environment.properties
          echo "Environment=CI" >> allure-results-9/environment.properties
          echo "Cypress.Version=$(npx cypress --version | grep 'Cypress binary' | awk '{print $4}')" >> allure-results-9/environment.properties
          echo "Node.Version=$(node -v | tr -d 'v')" >> allure-results-9/environment.properties

      - name: Upload Allure Results Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-9
          path: allure-results-9
          retention-days: 5

  deploy:
    # needs: initial_tests
    needs: [initial_tests, login_tentativa]
    runs-on: ubuntu-22.04
    if: success() || failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: npm install

      - name: Configure Allure
        run: npm install -g allure-commandline --save-dev
        
      - name: Download plugin Allure
        run: npm install --save-dev @shelex/cypress-allure-plugin

      - name: Clone gh-pages for History
        run: |
          git clone --branch=gh-pages --single-branch https://github.com/luizhenriquemt/duapi-automatizada.git gh-pages
          mkdir -p merged-allure-results/history
          cp -r gh-pages/history/* merged-allure-results/history/ || true

      - name: Download Allure Results Artifact 1
        uses: actions/download-artifact@v4
        with:
          name: allure-results-1
          path: allure-reports/allure-results-1

      - name: Download Allure Results Artifact 2
        uses: actions/download-artifact@v4
        with:
          name: allure-results-2
          path: allure-reports/allure-results-2

      - name: Download Allure Results Artifact 9
        uses: actions/download-artifact@v4
        with:
          name: allure-results-9
          path: allure-reports/allure-results-9

      # - name: Download Allure Results Artifact 4
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: allure-results-4
      #     path: allure-reports/allure-results-4

      - name: Merge Allure Results
        run: |
          mkdir -p merged-allure-results
          cp -r allure-reports/allure-results-1/* merged-allure-results/
          cp -r allure-reports/allure-results-2/* merged-allure-results/
          cp -r allure-reports/allure-results-9/* merged-allure-results/
      
  
      - name: Preserve Allure History
        run: |
          mkdir -p merged-allure-results/history
          if [ -d allure-report/history ]; then
            cp -r allure-report/history/* merged-allure-results/history/
          fi
  
      - name: Generate Final Allure Report
        run: |
          allure generate merged-allure-results --clean -o allure-report --lang br

      # - name: Upload Reports Results
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: allure-report
      #     path: allure-report 
      #     retention-days: 5

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          keep_files: true

      # - name: Send Email
      #   if: always()
      #   run: |
      #     node -e "
      #     const nodemailer = require('nodemailer');
      #     const fs = require('fs');
      #     const path = require('path');
          
      #     async function sendEmail() {
      #       let transporter = nodemailer.createTransport({
      #         service: 'SendGrid',
      #         auth: {
      #           user: 'apikey',
      #           pass: process.env.SENDGRID_API_KEY
      #         }
      #       });

      #       let info = await transporter.sendMail({
      #         from: process.env.EMAIL_USER,
      #         to: process.env.EMAIL_TO,
      #         subject: 'Relatório de Testes Automatizado',
      #         html: 'O relatório dos testes automatizados está disponível. Acesse: <a href="https://luizhenriquemt.github.io/duapi-automatizada/#">Relatório</a>'
      #       });
      #     }

      #     sendEmail().catch(console.error);
      #     "

    env:
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      EMAIL_TO: ${{ secrets.EMAIL_TO }}